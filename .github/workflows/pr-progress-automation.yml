name: PR Progress Automation

on:
  pull_request:
    types: [opened, closed]

env:
  # ÈÄ≤Êçó„É©„Éô„É´ÂÆöÁæ©
  PROGRESS_LABELS: '["todo", "in progress", "review", "done"]'

jobs:
  manage-pr-progress:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: read
      contents: read
    
    steps:
      - name: Update linked issues on PR creation
        if: github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const progressLabels = JSON.parse(process.env.PROGRESS_LABELS);
            const prBody = context.payload.pull_request.body || '';
            
            // PRÊú¨Êñá„Åã„ÇâÈñ¢ÈÄ£Issue„ÇíRegular Expression„ÅßÊäΩÂá∫ÔºàCloses #123, Fixes #456, Resolves #789 „Å™„Å©Ôºâ
            const issueRegex = /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+#(\d+)/gi;
            const matches = [...prBody.matchAll(issueRegex)];
            
            if (matches.length === 0) {
              console.log('‚ÑπÔ∏è No linked issues found in PR body');
              return;
            }
            
            for (const match of matches) {
              const issueNumber = parseInt(match[1]);
              
              try {
                // ÁèæÂú®„ÅÆIssue„É©„Éô„É´„ÇíÂèñÂæó
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                
                const currentLabels = issue.labels.map(label => label.name);
                const currentProgressLabels = currentLabels.filter(label => 
                  progressLabels.includes(label)
                );
                
                // Êó¢Â≠ò„ÅÆÈÄ≤Êçó„É©„Éô„É´„ÇíÂâäÈô§
                for (const label of currentProgressLabels) {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    name: label
                  });
                  console.log(`üóëÔ∏è Removed '${label}' label from issue #${issueNumber}`);
                }
                
                // 'review'„É©„Éô„É´„ÇíËøΩÂä†
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  labels: ['review']
                });
                
                console.log(`‚úÖ Added 'review' label to issue #${issueNumber} (linked to PR #${context.issue.number})`);
                
              } catch (error) {
                console.error(`‚ùå Failed to update issue #${issueNumber}:`, error.message);
              }
            }

      - name: Update linked issues on PR merge
        if: github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const progressLabels = JSON.parse(process.env.PROGRESS_LABELS);
            const prBody = context.payload.pull_request.body || '';
            
            // PRÊú¨Êñá„Åã„ÇâÈñ¢ÈÄ£Issue„ÇíÊäΩÂá∫
            const issueRegex = /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+#(\d+)/gi;
            const matches = [...prBody.matchAll(issueRegex)];
            
            if (matches.length === 0) {
              console.log('‚ÑπÔ∏è No linked issues found in PR body');
              return;
            }
            
            for (const match of matches) {
              const issueNumber = parseInt(match[1]);
              
              try {
                // ÁèæÂú®„ÅÆIssue„É©„Éô„É´„ÇíÂèñÂæó
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                
                const currentLabels = issue.labels.map(label => label.name);
                const currentProgressLabels = currentLabels.filter(label => 
                  progressLabels.includes(label)
                );
                
                // Êó¢Â≠ò„ÅÆÈÄ≤Êçó„É©„Éô„É´„ÇíÂâäÈô§
                for (const label of currentProgressLabels) {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    name: label
                  });
                  console.log(`üóëÔ∏è Removed '${label}' label from issue #${issueNumber}`);
                }
                
                // 'done'„É©„Éô„É´„ÇíËøΩÂä†
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  labels: ['done']
                });
                
                console.log(`‚úÖ Added 'done' label to issue #${issueNumber} (PR #${context.issue.number} merged)`);
                
              } catch (error) {
                console.error(`‚ùå Failed to update issue #${issueNumber}:`, error.message);
              }
            }

      - name: Revert linked issues on PR close without merge
        if: github.event.action == 'closed' && github.event.pull_request.merged == false
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const progressLabels = JSON.parse(process.env.PROGRESS_LABELS);
            const prBody = context.payload.pull_request.body || '';
            
            // PRÊú¨Êñá„Åã„ÇâÈñ¢ÈÄ£Issue„ÇíRegular Expression„ÅßÊäΩÂá∫ÔºàCloses #123, Fixes #456, Resolves #789 „Å™„Å©Ôºâ
            const issueRegex = /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+#(\d+)/gi;
            const matches = [...prBody.matchAll(issueRegex)];
            
            if (matches.length === 0) {
              console.log('‚ÑπÔ∏è No linked issues found in PR body');
              return;
            }
            
            for (const match of matches) {
              const issueNumber = parseInt(match[1]);
              
              try {
                // ÁèæÂú®„ÅÆIssue„É©„Éô„É´„ÇíÂèñÂæó
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                
                const currentLabels = issue.labels.map(label => label.name);
                const currentProgressLabels = currentLabels.filter(label => 
                  progressLabels.includes(label)
                );
                
                // review„É©„Éô„É´„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøÂá¶ÁêÜ
                if (!currentProgressLabels.includes('review')) {
                  console.log(`‚ÑπÔ∏è Issue #${issueNumber} is not in review status, skipping`);
                  continue;
                }
                
                // Êó¢Â≠ò„ÅÆÈÄ≤Êçó„É©„Éô„É´„ÇíÂâäÈô§
                for (const label of currentProgressLabels) {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    name: label
                  });
                  console.log(`üóëÔ∏è Removed '${label}' label from issue #${issueNumber}`);
                }
                
                // „Ç¢„Çµ„Ç§„É≥„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ'in progress'„ÄÅ„Åù„ÅÜ„Åß„Å™„Åë„Çå„Å∞'todo'
                const statusLabel = (issue.assignees && issue.assignees.length > 0) ? 'in progress' : 'todo';
                
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  labels: [statusLabel]
                });
                
                console.log(`‚úÖ Added '${statusLabel}' label to issue #${issueNumber} (PR #${context.issue.number} closed without merge)`);
                
              } catch (error) {
                console.error(`‚ùå Failed to update issue #${issueNumber}:`, error.message);
              }
            } 